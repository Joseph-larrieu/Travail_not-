{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { catchError, of } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.url = 'http://localhost:8080/users';\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  getUsers() {\n    return this.http.get(this.url);\n  }\n  getUserById(id) {\n    return this.http.get(this.url + \"/\" + id);\n  }\n  update(user) {\n    let updateUrl = this.url + \"/\" + user.id;\n    return this.http.put(updateUrl, user, this.httpOptions).pipe(catchError(this.handleError('updateUser')));\n  }\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    console.log(message);\n  }\n  static #_ = this.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","catchError","of","UserService","constructor","http","url","httpOptions","headers","getUsers","get","getUserById","id","update","user","updateUrl","put","pipe","handleError","operation","result","error","console","log","message","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["H:\\IssueTracker-Front\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport {HttpClient, HttpHeaders} from \"@angular/common/http\";\r\nimport {catchError, Observable, of} from \"rxjs\";\r\nimport {User} from \"../model/User\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  private url = 'http://localhost:8080/users'\r\n  private httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n  };\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  getUsers(): Observable<User[]> {\r\n    return this.http.get<User[]>(this.url);\r\n  }\r\n\r\n  getUserById(id: Number): Observable<User> {\r\n    return this.http.get<User>(this.url+\"/\"+id);\r\n  }\r\n\r\n  update(user: User): Observable<any> {\r\n    let updateUrl = this.url + \"/\" + user.id\r\n    return this.http.put(updateUrl, user, this.httpOptions).pipe(catchError(this.handleError<any>('updateUser')))\r\n  }\r\n\r\n  private handleError<T>(operation = 'operation', result?: T) {\r\n    return (error: any): Observable<T> => {\r\n\r\n      // TODO: send the error to remote logging infrastructure\r\n      console.error(error); // log to console instead\r\n\r\n      // TODO: better job of transforming error for user consumption\r\n      this.log(`${operation} failed: ${error.message}`);\r\n\r\n      // Let the app keep running by returning an empty result.\r\n      return of(result as T);\r\n    };\r\n  }\r\n\r\n  /** Log a HeroService message with the MessageService */\r\n  private log(message: string) {\r\n    console.log(message);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAoBA,WAAW,QAAO,sBAAsB;AAC5D,SAAQC,UAAU,EAAcC,EAAE,QAAO,MAAM;;;AAM/C,OAAM,MAAOC,WAAW;EAOtBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANN,KAAAC,GAAG,GAAG,6BAA6B;IACnC,KAAAC,WAAW,GAAG;MACpBC,OAAO,EAAE,IAAIR,WAAW,CAAC;QAAE,cAAc,EAAE;MAAkB,CAAE;KAChE;EAIG;EAEJS,QAAQA,CAAA;IACN,OAAO,IAAI,CAACJ,IAAI,CAACK,GAAG,CAAS,IAAI,CAACJ,GAAG,CAAC;EACxC;EAEAK,WAAWA,CAACC,EAAU;IACpB,OAAO,IAAI,CAACP,IAAI,CAACK,GAAG,CAAO,IAAI,CAACJ,GAAG,GAAC,GAAG,GAACM,EAAE,CAAC;EAC7C;EAEAC,MAAMA,CAACC,IAAU;IACf,IAAIC,SAAS,GAAG,IAAI,CAACT,GAAG,GAAG,GAAG,GAAGQ,IAAI,CAACF,EAAE;IACxC,OAAO,IAAI,CAACP,IAAI,CAACW,GAAG,CAACD,SAAS,EAAED,IAAI,EAAE,IAAI,CAACP,WAAW,CAAC,CAACU,IAAI,CAAChB,UAAU,CAAC,IAAI,CAACiB,WAAW,CAAM,YAAY,CAAC,CAAC,CAAC;EAC/G;EAEQA,WAAWA,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACE,GAAG,CAAC,GAAGJ,SAAS,YAAYE,KAAK,CAACG,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOtB,EAAE,CAACkB,MAAW,CAAC;IACxB,CAAC;EACH;EAEA;EACQG,GAAGA,CAACC,OAAe;IACzBF,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;EACtB;EAAC,QAAAC,CAAA,G;qBAzCUtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}